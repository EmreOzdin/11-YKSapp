import { generateAllCards } from './generateCards';
import {
    addManyQuestions,
    clearAllQuestions,
    getAllQuestions,
    getCategoryStats,
    getQuestionsByCategory
} from './realmConfig';

// Sorularƒ± MongoDB Realm'e y√ºkle
export const loadQuestionsToRealm = async () => {
  try {
    console.log('Sorular MongoDB Realm\'e y√ºkleniyor...');
    
    // √ñnce mevcut sorularƒ± temizle
    clearAllQuestions();
    
    // Yeni sorularƒ± olu≈ütur
    const allQuestions = generateAllCards();
    
    // Sorularƒ± Realm'e ekle - undefined explanation'larƒ± bo≈ü string yap
    const questionsWithDefaults = allQuestions.map(q => ({
      ...q,
      explanation: q.explanation || '',
    }));
    
    const success = addManyQuestions(questionsWithDefaults);
    
    if (success) {
      console.log(`‚úÖ ${allQuestions.length} soru ba≈üarƒ±yla MongoDB Realm'e y√ºklendi!`);
      
      // Kategori istatistiklerini g√∂ster
      const stats = getCategoryStats();
      console.log('üìä Kategori daƒüƒ±lƒ±mƒ±:');
      stats.forEach(category => {
        console.log(`   ${category.name}: ${category.count} soru`);
      });
      
      return true;
    } else {
      console.error('‚ùå Sorular y√ºklenirken hata olu≈ütu');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Sorular y√ºklenirken hata olu≈ütu:', error);
    return false;
  }
};

// T√ºm sorularƒ± getir
export const getAllQuestionsFromRealm = () => {
  try {
    const questions = getAllQuestions();
    return Array.from(questions);
  } catch (error) {
    console.error('Sorular getirilirken hata:', error);
    return [];
  }
};

// Kategoriye g√∂re sorularƒ± getir
export const getQuestionsByCategoryFromRealm = (category: string) => {
  try {
    const questions = getQuestionsByCategory(category);
    return Array.from(questions);
  } catch (error) {
    console.error('Kategori sorularƒ± getirilirken hata:', error);
    return [];
  }
};

// Kategori istatistiklerini getir
export const getCategoryStatsFromRealm = () => {
  try {
    return getCategoryStats();
  } catch (error) {
    console.error('Kategori istatistikleri getirilirken hata:', error);
    return [];
  }
};

// Sorularƒ± kontrol et
export const checkQuestionsInRealm = () => {
  try {
    const questions = getAllQuestions();
    console.log(`üìö MongoDB Realm'de toplam ${questions.length} soru bulundu`);
    
    const stats = getCategoryStats();
    console.log('üìä Kategori istatistikleri:');
    stats.forEach(category => {
      console.log(`   ${category.name}: ${category.count} soru (Kolay: ${category.easyCount}, Orta: ${category.mediumCount}, Zor: ${category.hardCount})`);
    });
    
  } catch (error) {
    console.error('‚ùå Sorular kontrol edilirken hata olu≈ütu:', error);
  }
};

// Sorularƒ± yeniden y√ºkle
export const reloadQuestionsToRealm = async () => {
  try {
    console.log('Sorular yeniden y√ºkleniyor...');
    const success = await loadQuestionsToRealm();
    
    if (success) {
      console.log('‚úÖ Sorular ba≈üarƒ±yla yeniden y√ºklendi!');
      checkQuestionsInRealm();
    } else {
      console.error('‚ùå Sorular yeniden y√ºklenirken hata olu≈ütu');
    }
    
    return success;
  } catch (error) {
    console.error('‚ùå Sorular yeniden y√ºklenirken hata olu≈ütu:', error);
    return false;
  }
};
